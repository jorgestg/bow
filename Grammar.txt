compilation-unit = mod-clause? use-clause* item+
mod-clause = 'mod' ID NL
use-clause = 'use' ID '.' ID NL

name = ID | qualified-name
qualified-name = ID ('.' ID)+

type-reference = name | keyword-type-reference | pointer-type-reference
keyword-type-reference = 'f32' | 'f64' | 'never' | 's8' | 's16' | 's32' | 's64' | 'u8' | 'u16' | 'u32' | 'u64' | 'unit'
pointer-type-reference = '*' type-reference

item-access-modifier = 'pub' | 'pkg' | 'mod'
member-access-modifier = 'pub' | 'pkg' | 'mod' | 'file'

item = struct-definition | enum-definition | function-definition

struct-definition = item-access-modifier? struct-keyword ID '{' member-declarations? '}'
struct-keyword = 'struct' | 'data'
member-declarations = NL member-declaration (NL member-declaration)* NL
member-declaration = field-declaration | method-definition
field-declaration = member-access-modifier? 'mut'? ID type-reference
method-definition = member-access-modifier? function-definition

enum-definition = item-access-modifier 'enum' ID '{' enum-member-declarations '}'
enum-member-declarations = NL enum-member-declaration (NL enum-member-declaration)* NL
enum-member-declaration = enum-case-declaration | method-definition
enum-case-declaration = ID ('(' type-reference ')')?
method-definition = member-access-modifier? function-definition

function-item-definition = item-access-modifier? function-declaration
function-definition = 'fun' ID '(' parameter-declarations? ')' type-reference? block
parameter-declarations = parameter-declaration ((',' parameter-declaration)+ ','?)? 
parameter-declaration = 'mut'? (ID type-reference | '*'? 'self')
block = '{' (statements NL)? '}'

statements = statement (NL statement)*
statement = local-declaration | return-statement | if-statement | assignment-statement | expression
local-declaration = 'let' 'mut'? ID type-reference? '=' expression | 'let' 'mut'? ID type-reference
return-statement = 'return' expression
if-statement = 'if' expression block ('else' 'if' expression block)* ('else' block)?
while-statement = 'while' expression block
assignment-statement = expression '=' expression

expression = primary-expression | call-expression | unary-expression | binary-expression
primary-expression = literal | identifier-expression
literal = INT | 'true' | 'false'
identifier-expression = ID

call-expression = primary-expression '(' arguments? ')'
arguments = expression ((',' expression)+ ','?)? 

unary-expression = ('not' | '-') expression
binary-expression = expression (
    '*' | '/' | '%'
    | '+' | '-'
    | '>' | '>='
    | '<' | '<='
    | '==' | '<>'
    | '&' | '|'
    | 'and' | 'or'
) expression

INT = [0-9]+ ('_' [0-9]+)*
NL = '\n'
STRING = '"' .* '"'
ID = [a-zA-Z_][a-zA-Z_0-9]*